/*
クラスとオブジェクト指向プログラミング：
C++はオブジェクト指向プログラミング言語であり、クラスを使用してデータとそれを操作する関数（メソッド）をカプセル化します。

カプセル化：
カプセル化は、オブジェクトの詳細を隠蔽して公開インターフェースのみを提供することで、オブジェクトの内部表現を保護するプロセスです。C++では、private、protected、publicのアクセス修飾子を使用して、クラスのメンバへのアクセスを制御します。

継承：
既存のクラス（基底クラス）から新しいクラス（派生クラス）を作成することができます。派生クラスは基底クラスの特性を「継承」し、新しい機能を追加することができます。

ポリモーフィズム：
ポリモーフィズムを使って、同じインターフェースを持ちながら異なるアクションを実行するオブジェクトを定義できます。これは主に「オーバーロード」と「オーバーライド」を使って実現されます。

オーバーライド：
オーバーライドは、派生クラスが基底クラスのメソッドを新しい実装で置き換えることです。C++11からは、overrideキーワードを使って、メソッドがオーバーライドされていることを明示できます。

テンプレート：
テンプレートを使用して、型に依存しない汎用の関数やクラスを定義できます。これにより、型パラメータを指定してコードの再利用性を高めることができます。

例外処理：
try、catch、throwを使用して、例外を投げたり、捕まえたりすることができます。

名前空間：
名前空間は、識別子の衝突を避けるために使用されます。namespaceキーワードを使って、コードを論理的なブロックに分けます。
*/